/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cryptex;

import java.awt.Color;
import javax.swing.JOptionPane;


/**
 *
 * @author Prasith Lakshan
 * 2015/08
 */
public class Main_Interface extends javax.swing.JFrame {

    /**
     * Creates new form Main_Interface
     */
    public Main_Interface() {
        
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputArea = new javax.swing.JTextArea();
        encryptButton = new javax.swing.JButton();
        decryptButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        durationLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openFileButton = new javax.swing.JMenuItem();
        saveFileButton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cryptex");
        setMinimumSize(new java.awt.Dimension(490, 401));

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setLineWrap(true);
        outputArea.setRows(5);
        outputArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(outputArea);

        inputArea.setColumns(20);
        inputArea.setLineWrap(true);
        inputArea.setRows(5);
        inputArea.setWrapStyleWord(true);
        inputArea.setInheritsPopupMenu(true);
        inputArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                inputAreaFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(inputArea);

        encryptButton.setText("Encrypt");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        decryptButton.setText("Decrypt");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Switch");
        jButton1.setToolTipText("Copy the encrypted output into the input area.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        durationLabel.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        durationLabel.setForeground(new java.awt.Color(114, 112, 112));
        durationLabel.setText("Ready");

        jMenu1.setText("File");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        openFileButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileButton.setText("Open...");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });
        jMenu1.add(openFileButton);

        saveFileButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileButton.setText("Save as...");
        saveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButtonActionPerformed(evt);
            }
        });
        jMenu1.add(saveFileButton);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(aboutMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(8, 8, 8))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(durationLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptButton)
                    .addComponent(decryptButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(durationLabel)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private final String s = "Type here first!";
    private final String t = "Not a Valid Encrypted value!\nPlease check again.";
    
    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        String key;
        String str = inputArea.getText();
        
        outputAreaColorReset();
        
        if(!str.isEmpty() && !str.equals(s)) {
            int len = str.length();
            
            if( len >= 9 && (len-5) / ((len - 5)/4) == 4) {
                int start = Integer.parseInt(str.substring(0, 1));
                if (start < 5) {
                    outputArea.setText(Cryptex.decrypt("0", str));
                } else {
                    final DecryptKey jp = new DecryptKey();
        
                    //jp.jButton1.setText("jButton1");
                    jp.jButton1.addActionListener(new java.awt.event.ActionListener() {
                        @Override
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            //jButton1ActionPerformed(evt);
                            outputArea.setText(Cryptex.decrypt(jp.get(), inputArea.getText()));
                            jp.dispose();
                        }
                    });
                    
                    
                }
                
                //key = JOptionPane.showInputDialog("Enter Key to decrypt:");
                //outputArea.setText(Cryptex.decrypt(str));
            } else {
                outputArea.setForeground(Color.gray);
                outputArea.setText(t);
            }
            
        } else {
            inputArea.setForeground(Color.gray);
            inputArea.setText(s);
        }
        
        
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        
        
        outputAreaColorReset();
        
        String str = inputArea.getText();       
        
        if(!str.isEmpty() && !str.equals(s)) {
            
            
            final SelectKey_Dialog jp = new SelectKey_Dialog();
        
            //jp.jButton1.setText("jButton1");
            jp.encryptButton2.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    Long startTime = System.currentTimeMillis();
                    
                    outputArea.setText(Cryptex.encrypt(jp.get(), inputArea.getText()));
                    
                    durationLabel.setText((System.currentTimeMillis()-startTime)  + " ms");
                }
            });
        } else {
            inputArea.setForeground(Color.gray);
            inputArea.setText(s);
        }
        
        
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String in = outputArea.getText();
        if (!in.equals(s) && !in.equals(t)) {
            inputArea.setText(outputArea.getText());
            outputArea.setText(" ");
        }
        durationLabel.setText("Ready");
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void inputAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_inputAreaFocusGained
        
        if(inputArea.getText().equals(s)) {
            Color black = Color.BLACK;
            inputArea.setForeground(black);
            inputArea.setText("");
        }
        
        
    }//GEN-LAST:event_inputAreaFocusGained

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
           inputArea.setText(Cryptex.openFile());
                
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "Cryptex can encrypt text which can then be securely transfered or saved."
                + " Any text encrypted with Cryptex can only be decrypted with Cryptex."
                + "\n# How to encrypt\n1. Open an excisting file using 'File > Open..' or type in the text to be encrypted in the top text box.\n2. Click on the 'Encrypt' button.\n3. Encrypted text will appear in the text box below.\n3. You can save the encrypted content to a file using 'File > Save As..' or copy the content to the clipboard.\n\n#The duration of the encryption process will be shown in the bottom left hand corner in milli-seconds.");
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void saveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileButtonActionPerformed
        String str = outputArea.getText();
        Cryptex.saveFile(str);
        
    }//GEN-LAST:event_saveFileButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(this, "             Cryptex\n                  2.0\n\u00A9 Prasith Lakshan 2015" );
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        //nothing
    }//GEN-LAST:event_jMenu1MouseClicked

    private void outputAreaColorReset() {
        Color black = Color.BLACK;
        outputArea.setForeground(black);
        outputArea.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            
            // wanted to have GTK+ theme on linux instead of Nimbus, but since Nimbus comes up before 
            // GTK+ in the for loop, I created an array to hold LFs, which I used to get the count of the
            // LFs installed. 
            
            javax.swing.UIManager.LookAndFeelInfo[] lfs = javax.swing.UIManager.getInstalledLookAndFeels();
            int count = 1;
            String nimbusLF = null;
            //System.out.println(lfs.length);
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //System.out.println(info.getClassName());
                
                // if the current LF in the loop is Nimbus this will save its Class name to a String.
                // had to do this when I typed in the class name, it gave an error because it couldn't
                // find nimbus. This solved it.
                if ("Nimbus".equals(info.getName())) {
                    //javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    nimbusLF = info.getClassName();
                    //break;
                }
                
                // If GTK+ is installed this will set it and break the loop.
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    //System.out.println(info.getClassName());
                    break;
                }
                
                // this will set the windows theme instead of nimbus
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    //System.out.println(info.getClassName());
                    break;
                }
                
                // count is greater than the array length only if GTK+ or windows is not found. 
                // Then set the Nimbus LF.
                if(count > lfs.length) {
                    javax.swing.UIManager.setLookAndFeel(nimbusLF);
                    
                }
                
                count++;
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main_Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton decryptButton;
    private javax.swing.JLabel durationLabel;
    private javax.swing.JButton encryptButton;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JTextArea inputArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem openFileButton;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JMenuItem saveFileButton;
    // End of variables declaration//GEN-END:variables
}
